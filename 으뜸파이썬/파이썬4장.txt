함수 개요 : 함수는 여러 자료를 받아 특정한 기능을 수행하고 결과 값을 반환하는 코드, 반복적으로 사용되는 코드(생산성이 높다)
    - 내장 함수 : 파이썬에서 미리 만들어서 제공하는 함수로 인터프리터에 포함되어 배포되는 함수
        - ex. print(), input(), str(), int(), float(), len() 등
    - 사용자 정의 함수 : 사용자가 직접 만들어서 사용하는 함수

사용자 정의 함수 사용법
    1. 함수 정의(define) - 함수 만들기
    2. 함수 호출(function call) - 함수 정의 시 사용한 함수 이름과 매개 변수를 고려하여 호출

함수는 여러번 반복적으로 사용할 때 편리

함수 정의와 호출 시 주의
    - 먼저 정의된 함수를 호출 해야함
    - 정의와 호출의 순서가 바뀌면 안됨

함수와 매개변수
def foo(m,n):
    code
    return n1[,n2,...]

foo(3,4)

    - 반환 값이 있는 함수
    - 다중 반환문 -> 튜플(tuple) 형태로 반환(return)


전역 변수 (global variable)
    - 함수 바깥에서 선언되거나 전체 영역에서 사용 가능한 변수
    - 함수 외부에서 정의된 값을 함수 내부에서 변경 -> 함수 내에서 지역 변수로 사용

디폴트 매개 변수 : def print_star(n=1)과 같이 디폴트로 n에 1을 넣어준다.
일반 매개 변수와 디폴트 매개 변수를 혼용해서 사용할 수 있다.

인자의 개수를 미리 알 수 없을 경우 : 가변적인 인자 전달
    - 가변 인자(arbitrary argument)
        - 인자의 수가 정해지지 않은 인자
        - 별표(*)를 매개변수의 앞에 넣어 사용
        - 가변적 인자는 튜플이나 리스트와 비슷하게 for - in 문에서 사용가능
        - ex. def greet(*names), print('인자의 개수:', len(args)), *names, len(args)

재귀함수(recursion) : 함수 내부에서 자기 자신을 다시 호출하는 함수
    - 절차적 기법으로 해결하기 어려운 문제를 직관적이고 간단하게 해경 가능
    - ex. 팩토리얼 구하기
    - ex. 피보나치 수열

임력함수와 출력함수
    - input() 함수 : 사용자로부터 키보드를 통해 입력을 받기 위한 함수
        - input() 함수의 사용 결과는 문자열을 반환해줌
        - split() 메소드를 사용하여 입력된 문자를 공백 단위로 나누어 주는 작업이 필요
            - split() 메소드의 디폴트 구분자(separator)인 공백 대신 다른 기호 사용 가능(ex. split(','))

문자열 처리 메소드 : .upper() : 대문자로 변환, .lower() : 소문자로 변환, 'Apple,Banana,Orange'.split(',') : 구분자로 쉼표 사용

함수와 메소드
    - 함수 : 호출될 때 매개변수를 전달받아(생략가능) 특정한 동작을 수행하고 필요한 경우 그 결과를 반환하는 모든 프로그래밍 모듈
    - 메소드 : 객체지향 프로그래밍에서 다루는 객체에 부속되는 함수
        - 메소드는 인스턴스 라고 하는 각각 다른 값을 가진 객체들마다 호출할 수 있음

베이스 문자열과 플레이스 홀더
    - 템플릿 문자열(template string) 혹은 베이스 문자열(base string)
        - 코드를 대화창에 입력할 때 사용되는 문자열
        - 출력 메소드 format을 호출하는 문자열
    - 플레이스홀더(placeholder)
        - 인자의 출력을 목적으로 사용되는 중괄호
'{} Python!'.format('Hello') => {} : 플레이스 홀더, 'Hello' : 플레이스 홀더에 들어갈 내용, '{} Python!' : 베이스 문자열
{:.3f} : 소수점 셋째자리까지 나타냄
{:10.3f} : 소수점 셋째자리까지 나타내고 10자리 확보해서 표시

문자열의 다양한 메소드
    - .rstrip() : 오른쪽 공백 지우기
    - .lstrip() : 왼쪽 공백 지우기
    - .strip() : 공백 지우기
    - ','.join('ABCD') : 각 글자마다 ,를 첨부
    - replace(old,new) : 문자열 내에서 old를 new로 바꿈