# 대화식 실행모드 : 파이썬 명령어를 입력할 수 있는 대화식 창에서 즉각적인 반응(피드백)을 받을 수 있는 모드
# 간단한 코드를 테스트할 때는 주로 대화식 실행모드 사용
# 입력 후 엔터키를 입력하면 실행 됨
# >>> print('Hello Python')
# Hello Python


# 스크립트 실행모드 : .py라는 확장자를 가지는 스크립트를 만들어서 파이썬 인터프리터를 통해 실행
# 복잡한 로직이 있는 코드는 스크립트 파일을 만들어서 실행


# 메인 메모리 : 컴퓨터의 데이터가 저장되어 읽기와 쓰기, 덮어쓰기를 하는 곳 / 주기억장치(메모리라고도 불림)
# 메모리 주소 : 저장된 데이터를 읽고 쓰기 위해서는 데이터가 저장된 위치를 알아야 함 / 메모리는 바이트 별로 주소가 부여됨


# 비트와 바이트
# - 비트 : 컴퓨터에서 사용하는 정보 표현의 최소의 단위
# -        0과 1을 이용하여 정보를 표현
# -        한 비트만으로 표현 가능한 정보가 너무 적기 때문에 주로 8비트 단위로 저장

# 바이트
# - 8비트 단위를 1바이트라고 함
# - 2^8 = 256가지의 서로 다른 상태 정보를 표현


# 변수의 선언 : 변수에 값을 대입하면 변수가 선언됨


# 식별자 : 사용자가 정의하는 변수나 함수에 대해 서로 구별되는 이름을 부여해야 함. 서로 구별되는 이름을 식별자라고 함
# - 의미를 명확하게 이해할 수 있는 식별자를 사용하는 것이 편리
# - 하나의 변수 이름을 여러 개의 메모리 위치를 지칭하는데 사용하게 되면 어느 메모리 공간을 지칭하는지 알기 어려움
# - 다른 메모리 위치에는 서로 다른 이름을 부여해야 함

# 식별자 사용 규칙
# 1. 문자와 숫자, 밑줄 문자 _로 이루어진다
# 2. 중간에 공백이 들어가면 안됨
# 3. 첫 글자는 반드시 문자나 밑줄 문자 _로 시작해야 함
# 4. 대문자와 소문자는 구분됨
# -> Count와 count는 서로 다른 식별자임
# 5. 식별자의 길이에 제한은 없다
# 6. 키워드(예약어)는 식별자로 사용할 수 없음

# 낙타등(camel case) 표기법(캡워드capword)을 따름
# - CapitalizedWords, mixedCase


# 산술연산(Mathematical operation) : 연산의 결과가 수 형태인 연산
# 연산자 : +(덧셈) / -(뺄셈) / *(곱셈) / /(실수 나눗셈) / //(정수 나눗셈(몫)) / %(나머지) / **(거듭제곱)


# 표현식 : 연산자를 사용하는 문장을 표현식(expression)이라 함


# 자료형 : 프로그래밍 언어에서 처리할 수 있는 데이터의 유형
# 기본 자료형 : 부울형(true, false), 숫자형(정수, 실수, 복소수), 문자열, 리스트, 튜플, 집합, 딕셔너리
# 자료형 확인 : type()


# 동적 형 결정과 정적 형 결정
# 동적(dynamic) : 어떤 행위가 프로그램이 실행되는 중에 일어나는 것
# 정적(static) : 어떤 행위가 프로그램이 실행되기 전에 미리 결정되는 것
# 동적 형 결정은 프로그램의 동작이 유연함
# 정적 형 결정은 잘못된 값을 넣거나, 서로 연산할 수 없는 데이터를 가지고 연산을 실행하려는 동작을 프로그램 수행 전에 소스코드 해석 단계에서 걸러낼 수 있음

# 파이썬의 자료형 결정 : 동적 형 결정 방식을 사용함 - 변수에 데이터를 대입할 때 결정

# 정적 타이핑(static typing) : 컴파일 시점에 자료형을 검사, 자료의 타입을 일일이 명시해야 함, C,C++,JAVA,Objective-C,PASCAL
# 동적 타이핑(dynamic typing) : 자료의 타입을 일일이 알려줄 필요 없어 코드가 간결해짐, 런타임 중 자료형 에러가 날 수 있다. Python, Basic, Ruby, PHP, JavaScript 등


# 문자열은 문자의 나열, 작은 따옴표('') 나 큰 따옴표("")로 묶어서 표현, 문자열 상수는 클래스 str의 객체


# 이스케이프 문자 : \n, \t 등
# \n : 줄바꿈을 수행
# \t : 탭 문자의 삽입 기능을 수행


# 함수 str(), eval()
# str(인수) 함수는 인수로 입력된 값을 문자열 객체로 반환
# eval('연산식') : 실행 가능한 문자열 '연산식'을 실행한 결과를 반환


# 수치 자료형
# 정수(int) : 음의 자연수, 0, 자연수
# 실수(float) : 소수점 이하의 값 포함
# 부울형(bool) : 참과 거짓을 의미하는 True와 False로 이루어짐
# 문자열(string)형 : 'Hello','World'와 같은 문자열의 집합


# 부동소수점수(floating point number) : 불가피한 수치 오류를 미세하게 포함
# 0.1+0.1+0.1 = 0.300000000000000000004 => 이런 식으로 오류 나옴


# 복소수 자료형 : 실수 뿐만이 아닌 허수 값도 가지고 있음, 기하학적인 좌표로도 표현 가능
# 허수의 표현에 'j' 사용(i 사용시 오류 발생)
# 켤레 복소수(complex conjugate) : 켤레 복소수는 conjugate() 메소드로 구할 수 있음
# 복소수의 크기는 abs() 메소드로 구할 수 있음


# 할당 연산자(=) : 우변의 값을 좌변의 변수에 대입 또는 할당 하라는 의미
# 다중 할당과 동시 할당 가능
# 다중 할당 : num1 = num2 = num3 = 200
# 동시 할당 : num1, num2 = 300, 400

# 복합 할당 연산자
# +=, -=, *=, /=, //=, %=, **=     => i = i + j, - j 등

# 비교 연산자
# ==, !=, >, <, >=, <=

# 논리 연산자
# x and y, x or y, not x

# 비트 연산자 : 정수 데이터형에 대하여 비트 단위의 조작이 가능, 비트 단위 조작을 위한 연산자를 비트 연산자라고 함 => 비트 연산자의 결과는 정수이다.
# &(비트 단위 AND), |(비트 단위 OR), ^(비트 단위 XOR), ~(비트 단위 NOT), <<(비트 단위 왼쪽으로 이동 : 곱하기), >>(비트 단위 오른쪽으로 이동 : 나누기)

# 진법 변환 : bin(정수) 함수 : 10진법 정수를 2진수 문자열로 변환 / int('2진법 문자열', 2) : 2진수를 10진수로 변환


# 음수의 표현 방법 : 음수의 크기는 보수를 이용하여 표현한다. 보수는 1의 보수, 혹은 2의 보수를 사용한다.



# 사용자 입력 처리 : input() 함수 : 사용자로부터 실행 중 데이터를 입력 받는 기능을 제공
# str 형으로 값을 받아들인다.
# str형의 입력을 정수로 바꾸고 싶을 때 : age = int(input('나이를 입력하세요'))

# split() 활용 : name, age = input('이름과 나이 입력 : ').split()